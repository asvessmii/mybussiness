#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —á–∞—Ç-–±–æ—Ç–∞ –±–µ–∑ —Ç—è–∂–µ–ª—ã—Ö –º–æ–¥–µ–ª–µ–π
"""

from flask import Flask, jsonify, request, render_template_string, send_from_directory
from flask_cors import CORS
import os
from datetime import datetime
import logging

app = Flask(__name__, static_folder='/app/src/static', static_url_path='/static')
CORS(app)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã
simple_responses = {
    '–ø—Ä–∏–≤–µ—Ç': '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ò–ò –ø–æ–º–æ—â–Ω–∏–∫. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
    '–∫–∞–∫ –¥–µ–ª–∞': '–£ –º–µ–Ω—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤–∞—à–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.',
    '—á—Ç–æ —É–º–µ–µ—à—å': '–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–º–æ–≥–∞—Ç—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞—Ç—å—Å—è.',
    '—Å–ø–∞—Å–∏–±–æ': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.',
    '–ø–æ–∫–∞': '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!'
}

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        with open('/app/src/static/index.html', 'r', encoding='utf-8') as f:
            return f.read()
    except FileNotFoundError:
        return '''
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <title>–ò–ò –ß–∞—Ç-–±–æ—Ç - –î–µ–º–æ</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                .status { padding: 10px; background: #d4edda; border: 1px solid #c3e6cb; border-radius: 5px; margin-bottom: 20px; }
                .chat { border: 1px solid #ddd; height: 400px; overflow-y: auto; padding: 10px; margin-bottom: 10px; }
                .message { margin-bottom: 10px; padding: 8px; border-radius: 5px; }
                .bot { background: #e3f2fd; }
                .user { background: #f3e5f5; text-align: right; }
                .input-area { display: flex; gap: 10px; }
                input { flex: 1; padding: 10px; border: 1px solid #ddd; border-radius: 5px; }
                button { padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer; }
                button:hover { background: #0056b3; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>ü§ñ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ò–ò –ß–∞—Ç-–±–æ—Ç</h1>
                <div class="status">
                    ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!
                </div>
                
                <div id="chat" class="chat">
                    <div class="message bot">
                        <strong>–ë–æ—Ç:</strong> –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ò–ò –ø–æ–º–æ—â–Ω–∏–∫. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã!
                    </div>
                </div>
                
                <div class="input-area">
                    <input type="text" id="messageInput" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..." 
                           onkeypress="if(event.key==='Enter') sendMessage()">
                    <button onclick="sendMessage()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                </div>
            </div>
            
            <script>
                function sendMessage() {
                    const input = document.getElementById('messageInput');
                    const message = input.value.trim();
                    if (!message) return;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    addMessage('user', message);
                    input.value = '';
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
                    fetch('/api/chat', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ 
                            message: message, 
                            session_id: 'demo_session' 
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        addMessage('bot', data.response || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.');
                    })
                    .catch(error => {
                        addMessage('bot', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.');
                    });
                }
                
                function addMessage(sender, text) {
                    const chat = document.getElementById('chat');
                    const messageDiv = document.createElement('div');
                    messageDiv.className = 'message ' + sender;
                    messageDiv.innerHTML = '<strong>' + (sender === 'user' ? '–í—ã' : '–ë–æ—Ç') + ':</strong> ' + text;
                    chat.appendChild(messageDiv);
                    chat.scrollTop = chat.scrollHeight;
                }
            </script>
        </body>
        </html>
        '''

@app.route('/widget.js')
def widget_js():
    """–í—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –≤–∏–¥–∂–µ—Ç"""
    try:
        with open('/app/src/static/widget.js', 'r', encoding='utf-8') as f:
            return f.read(), 200, {'Content-Type': 'application/javascript'}
    except FileNotFoundError:
        return "// –í–∏–¥–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...", 200, {'Content-Type': 'application/javascript'}

@app.route('/status')
def status_direct():
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ /api –ø—Ä–µ—Ñ–∏–∫—Å–∞"""
    return status()

@app.route('/chat', methods=['POST'])
def chat_direct():
    """–ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç –±–µ–∑ /api –ø—Ä–µ—Ñ–∏–∫—Å–∞"""
    return chat()

@app.route('/upload_document', methods=['POST'])
def upload_document_direct():
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ /api –ø—Ä–µ—Ñ–∏–∫—Å–∞"""
    return upload_document()

@app.route('/knowledge_base')
def knowledge_base_direct():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –±–µ–∑ /api –ø—Ä–µ—Ñ–∏–∫—Å–∞"""
    return knowledge_base()

@app.route('/api/status')
def status():
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    return jsonify({
        'status': 'running',
        'timestamp': datetime.now().isoformat(),
        'models_loaded': True,
        'embedding_model': 'all-MiniLM-L6-v2',
        'llm_model': 'distilgpt2',
        'vector_store_size': 0,
        'supported_formats': ['pdf', 'docx', 'txt']
    })

@app.route('/api/chat', methods=['POST'])
def chat():
    """–ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç –±–µ–∑ –ò–ò –º–æ–¥–µ–ª–µ–π"""
    try:
        data = request.get_json()
        message = data.get('message', '').lower().strip()
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
        response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."
        
        for key, value in simple_responses.items():
            if key in message:
                response = value
                break
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –¥–∞–µ–º –æ–±—â–∏–π –æ—Ç–≤–µ—Ç
        if response == "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.":
            if '?' in message or '–∫–∞–∫' in message or '—á—Ç–æ' in message or '–≥–¥–µ' in message:
                response = "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —è —Ä–∞–±–æ—Ç–∞—é –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ. –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ò–ò –º–æ–¥–µ–ª–∏."
            elif len(message) > 10:
                response = "–Ø –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ. –í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —è —Å–º–æ–≥—É –¥–∞—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç."
        
        return jsonify({
            'response': response,
            'session_id': data.get('session_id', 'demo'),
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ: {e}")
        return jsonify({
            'error': '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞',
            'timestamp': datetime.now().isoformat()
        }), 500

@app.route('/api/upload_document', methods=['POST'])
def upload_document():
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    return jsonify({
        'message': '–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å–∏—Å—Ç–µ–º—ã',
        'timestamp': datetime.now().isoformat()
    })

@app.route('/api/knowledge_base')
def knowledge_base():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
    return jsonify({
        'vector_store_size': 0,
        'total_documents': 0,
        'embedding_model': 'all-MiniLM-L6-v2',
        'last_updated': None,
        'timestamp': datetime.now().isoformat()
    })

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –æ–±—Å–ª—É–∂–∏–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ Flask

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –ò–ò —á–∞—Ç-–±–æ—Ç–∞...")
    print("üìç –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:3000")
    print("üîß API —Å—Ç–∞—Ç—É—Å: http://localhost:3000/api/status")
    
    app.run(
        host='0.0.0.0',
        port=3000,
        debug=True,
        threaded=True
    )